import pytest

'''
Alice and Bob have candy bars of different sizes: A[i] is the size of the i-th bar of candy that Alice has, and B[j] is the size of the j-th bar of candy that Bob has.

Since they are friends, they would like to exchange one candy bar each so that after the exchange, they both have the same total amount of candy.  (The total amount of candy a person has is the sum of the sizes of candy bars they have.)

Return an integer array ans where ans[0] is the size of the candy bar that Alice must exchange, and ans[1] is the size of the candy bar that Bob must exchange.

If there are multiple answers, you may return any one of them.  It is guaranteed an answer exists.

Example 1:

Input: A = [1,1], B = [2,2]
Output: [1,2]
Example 2:

Input: A = [1,2], B = [2,3]
Output: [1,2]
Example 3:

Input: A = [2], B = [1,3]
Output: [2,3]
Example 4:

Input: A = [1,2,5], B = [2,4]
Output: [5,4]
 

Note:

1 <= A.length <= 10000
1 <= B.length <= 10000
1 <= A[i] <= 100000
1 <= B[i] <= 100000
It is guaranteed that Alice and Bob have different total amounts of candy.
It is guaranteed there exists an answer.
'''

class Solution:
    def fairCandySwap(self, A, B):
        """
        :type A: List[int]
        :type B: List[int]
        :rtype: List[int]
        """
        # this worked for many cases
        # for large huge test sets it took too long
        # what kills it? the nested loop.
        sumA, sumB  = sum(A), sum(B)
        for a_index in range(len(A)):
            for b_index in range(len(B)):
                x = (sumA - A[a_index]) + B[b_index]
                y = (sumB - B[b_index]) + A[a_index]
                if (x == y):
                    return [A[a_index], B[b_index]]


    def fairCandySwap2(self, A, B):
        """
        :type A: List[int]
        :type B: List[int]
        :rtype: List[int]
        """
        sumA, sumB  = sum(A), sum(B)
        a_len = len(A)
        b_len = len(B)

        # use the shortest list to compare against the larger list
        # this technique does not improve enough for leetcode
        if a_len > b_len:
            for a_index in range(a_len):
                for b_index in range(b_len):
                    x = (sumA - A[a_index]) + B[b_index]
                    y = (sumB - B[b_index]) + A[a_index]
                    if (x == y):
                        return [A[a_index], B[b_index]]
        else:
            for b_index in range(b_len):
                for a_index in range(a_len):
                    x = (sumA - A[a_index]) + B[b_index]
                    y = (sumB - B[b_index]) + A[a_index]
                    if (x == y):
                        return [A[a_index], B[b_index]]


    def fairCandySwap3(self, A, B):
        # get the sum of each list
        sumA, sumB = sum(A), sum(B)
        # use a set for faster lookup operation; also removes any duplicates
        setA, setB = set(A), set(B)
        # sum up both totals and take half -> this is the equal number of candy both should have
        total = (sumA + sumB) // 2  # the final same total amount
        # [1,1], [2,2] -> sumA = 2, sumB = 4, total = 6 // 2 which is 3

        # now we loop through 1 set and perform lookups in the other set, faster than a 2nd loop
        # per stack overflow:
        # Sets are significantly faster when it comes to determining if an object is present
        # in the set (as in x in s), but are slower than lists when it comes to iterating over their contents.
        for i in setA:
            # 3 - (2 - 1) == 2
            # 2 is in set B at position 0
            if total - (sumA - i) in setB:
                return [i, total - (sumA - i)]


@pytest.mark.parametrize('A, B, expected', [
    ([1,1], [2,2], [1, 2]),
    ([1,2], [2,3], [1, 2]),
    ([2], [1,3], [2, 3]),
    ([1,2,5], [2,4], [5,4]),
    ([46933,44319,30014,39543,8376,19029,36456,26783,15870,37813,28083,5721,5389,38691,37587,16798,41863,143,15402,43196,22140,19645,33864,4170,36790,20378,2452,49385,10162,23968,37173,3953,17977,29900,6104,16131,8331,35619,10953,37379,27228,44055,31460,23436,31683,404,21859,37878,3691,21375,23583,28581,1911,48121,14160,3084,44529,29287,15682,48339,34065,47697,30915,9880,42537,20469,42870,24260,11633,24374,27725,42574,37612,18469,10987,17936,2060,31234,12790,46344,17302,15851,6646,30518,27836,24499,21385,35398,47988,6407,25128,21476,37228,46996,7636,7317,3338,27093,40372,33653,3058,10031,26857,14602,48117,27867,25773,44032,12925,39992,23243,47243,7697,1547,3567,24235,36393,9998,19850,16564,28304,12259,22638,17805,19101,41620,19866,16605,24943,39310,17809,8691,15846,46642,38010,49528,2065,6403,17126,42307,45289,13724,27686,7497,38020,20534,9669,49059,2694,29862,43598,34634,21444,1043,24012,17812,3529,23154,25347,46119,17801,28070,28241,17491,14558,10434,22074,47456,781,24935,37735,43183,15828,46809,37075,7378,42945,5302,5758,7668,9914,30298,45674,41091,25512,42486,25449,36478,3637,33882,19475,33959,49778,534,605,14534,19087,19742,26362,12580,46167,10269,12463,32817,37978,36642,4026,22770,23212,19404,3499,34727,49745,22571,13800,49017,31494,47431,30828,34449,41449,47293,23721,48781,24923,34259,26278,23421,9404,38755,4161,49062,45055,11236,27877,32673,34115,25937,18598,27336,17299,16305,42439,28094,2123,7046,44716,36256,10525,3245,40214,13913,16339,18681,13865,19997,43650,10963,47635,27940,26218,10853,21186,23771,46545,3021,21333,11653,32584,26609,10539,39997,26064,2377,46856,46760,18413,29105,48227,44366,14469,3562,16666,12215,24481,15306,8415,21892,39093,22495,33606,23647,13261,49311,14894,40271,7153,35465,30571,42442,43612,46826,36146,3025,45168,27323,24144,25141,38111,29602,16359,2894,20325,46160,26034,1488,41722,34720,17787,8591,20269,4507,14309,24970,47068,18838,4726,39242,40702,25852,6985,6902,29584,19928,19193,20977,16448,31564,3050,35362,23725,25381,23659,38268,46623,45843,39087,31018,7475,13048,18343,502,49295,46209,3471,49776,27088,31246,35498,46967,36195,2071,22345,25183,15041,27698,24196,1093,1947,21973,28114,46433,26202,45324,23089,33893,4286,41993,49492,20745,46658,10503,24917,23375,20235,33828,8807,48050,35730,11417,27466,19444,27120,23463,31357,39308,30937,31008,47998,16523,12687,39356,36183,5248,17839,37082,20303,9245,42590,27560,6492,23759,31669,43749,3433,36299,48193,33957,32731,28271,48908,45243,44987,16724,49098,1956,22077,43353,34995,22571,8318,19739,19229,21270,41895,6336,42482,36739,24466,26353,18721,33296,10699,13995,36416,34392,19026,33050,1426,30977,47172,46478,13946,15127,37129,21847,11635,8663,5372,46930,24115,38634,3441,39080,48209,8374,40579,26142,49933,29878,46637,597,23572,43961,19348,10849,46047,26420,41474,27172,33333,42753,5943,43892,2749,19342,43994,41330,1964,1763,7115,10336,41570,9631,22928,33835,13041,40997,25132,2533,33497,9273,17258,17207,27576,44529,31699,34253,5799,41391,20182,6795,14396,28068,5500,9064,11624,37829,23916,33663,34261,46270,40048,19961,25711,13125,17280,7139,30794,31740,9966,47138,18407,36425,8,16569,16880,444,38273,16662,41823,18885,33610,21654,16486,48638,1751,45861,30251,22643,29344,29192,13434,43890,30024,26002,12473,27106,14857,4246,26678,199,47731,17132,23046,13499,2674,48457,48798,32117,30027,6188,3078,47215,34658,20004,7398,22209,15241,40949,16152,15460,37986,43436,13262,43552,3787,35723,39367,38224,20696,46391,15373,22779,32921,38062,45992,42050,1484,2412,45986,14040,19229,26183,38061,38358,27709,38697,47159,19056,12950,42483,23261,4414,6266,36664,2532,20875,22158,35871,31481,34875,38937,15085,26652,8670,41186,43402,39540,12965,33201,8983,6376,5717,13267,47818,9558,46987,42189,35161,25154,42362,3984,15571,13420,26130,11047,1060,47037,605,42428,31283,1831,32272,20746,15519,38313,38558,46108,42204,13063,7231,17245,47476,10486,39743,20761,41405,19222,3243,16654,24428,43930,48356,37997,48573,43730,39760,43209,20091,49013,33290,14824,43149,49353,14046,14700,14517,31007,21122,31858,46506,3040,19839,2080,32218,25031,35750,17398,18534,3062,39965,15486,28054,34941,26500,20356,24321,35437,9407,24166,39363,18541,27452,45750,13869,44974,2908,22450,11136,18479,36537,35543,1796,9131,38096,1348,36779,24236,30100,23495,14171,1835,27845,32867,3161,17093,36994,42484,6683,8556,48946,4195,21344,11948,9784,4496,47831,13542,369,38296,13761,28976,37227,26171,42629,25973,17939,41066,13603,21559,45868,1147,1962,44143,44917,25993,9550,35218,38860,6836,17740,37463,49798,36709,38753,44294,16636,41642,22398,46506,6967,45544,26580,44408,20502,4919,13481,3237,18194,14446,15295,7261,41222,15107,34505,34898,9515,45866,14602,32149,45810,35641,32947,28895,30002,7305,49275,46807,15049,13828,23627,24986,11047,1557,23580,5649,3322,1833,25263,40829,37638,49996,30228,15411,23500,7532,43523,673,15336,21828,47318,49864,41199,48680,6992,21165,38260,26135,14184,22437,8552,41698,43182,20500,31651,41126,5651,585,40941,28004,17223,44530,826,15909,27404,19721,17719,17786,10447,23233,5018,35664,41144,47719,41232,11837,26204,47571,16797,2982,34220,10062,33065,5219,5567,31777,562,30225,26729,44827,2105,36296,42811,31932,46296,37569,46569,36611,24087,17985,43524,34277,39135,13273,43140,46275,11451,48335,48776,43565,41151,26409,19866,3992,37732,31670,5497,7476,3883,28528,28582,28164,24647,21570,42318,7752,31367,47053,29574,7599,36137,9011,18205,35491,1143,41984,43204,10922,22934,3706,10508,47175,21377,38299,37638,4266,3420,10861,41402,21139,4182,31420,31664,37313,18220,26355,47987,6632,24881,33226,43661,11514,6339,3051,24436,47259,2905,40421,43864,17572,37740,42981,43680,47895,29528,30478,25963,25800,13002,36870,5611,41958,12030,46839,9531,45608,11161,16948,14973,35678,3397,4055,31328,47322,45059,24458,32095,36783,45820,44178,6847,18778,15809,15916,8072,2311,3330,42079,14922],
     [14418,43518,30926,43877,32273,66016,87830,10362,43881,5011,29956,93678,54545,76902,21381,34922,32871,94070,98295,30704,51047,87981,81000,35986,85796,45789,37831,49042,65820,92998,31544,51657,53154,91168,91788,66058,39577,78886,53427,69940,72897,77407,10587,33504,47530,35005,18128,53478,77041,80129,9386,45904,82120,4433,97610,20315,87497,55581,22187,3684,99473,22957,84501,3029,68787,56981,47505,66509,48529,9191,66764,20858,97845,5059,20902,70689,12453,74462,34762,48664,44348,93840,29779,81251,20704,27832,12974,25983,43325,87475,11555,30793,59626,52776,19435,58931,99735,61699,56068,37535,64632,22147,25725,84252,83418,75,29163,50500,42411,21580,58210,57657,52968,41309,41247,77069,20166,99768,4152,20381,15757,7893,81797,86362,52062,82117,13012,40888,65490,49589,95238,64960,21590,73786,2612,10106,54003,66974,49643,66398,97354,13187,22949,23050,92038,9339,20557,50541,53670,28589,57807,1603,23286,25652,7898,90210,91994,73456,69534,90406,73769,68579,82809,89631,26171,28168,20274,78269,16067,3073,57083,90072,55692,30153,41809,90985,87282,21956,97866,57567,98016,36225,75253,85023,61360,29986,33977,477,71581,79500,90909,54861,40836,57908,34991,13851,34138,41739,24760,1181,40879,83075,13496,91760,37068,65804,60646,20029,15297,13597,79410,14225,92353,30479,51178,3316,17092,94602,23958,1053,74922,72820,31410,76998,38147,75883,94266,52740,19024,45944,4463,24457,96946,9122,92990,37388,44973,17186,92438,37625,99098,16787,31858,82711,13890,91997,10432,10983,26632,49706,27605,47429,66328,67996,32475,54267,75691,7819,35731,57227,95869,62609,66031,31821,11661,32451,11601,85141,26866,92628,88286,99459,87843,42586,1733,46989,36028,46015,47062,56010,75936,98381,645,87044,33911,97632,42317,46199,86778,74671,86719,69971,84113,99647,44457,78714,6291,29369,83932,88500,71253,78884,86451,73324,75142,67968,19204,14188,8000,95419,59897,2506,23612,8742,84178,68034,23859,15057,27908,69471,72198,66536,61831,70764,9465,39773,44916,93161,70369,4769,72124,30423,43601,36067,21486,59852,43076,83092,16855,39214,44407,80539,4548,84213,19456,99998,26319,188,13903,1537,87826,69264,83436,69460,51444,2552,40346,92348,29930,71341,29863,40098,91855,32608,37121,51576,28860,19228,33522,69355,4833,41154,41893,78145,91693,37313,34465,21986,48899,88794,32634,94527,60283,47313,62989,69738,92810,64682,94596,60502,41586,28992,91139,58234,10054,78983,94163,26159,37179,27628,82185,32408,97119,1514,37116,49405,49712,88041,22910,25740,6961,16059,75582,83488,97169,97585,1805,97016,62068,86660,65404,43661,56432,25807,78682,52890,65622,37549,83617,7120,8698,68344,7963,75326,33538,63475,77571,90127,98120,61004,26747,82479,18802,66360,27124,17052,16622,89731,50068,55688,40689,37491,59902,37449,58676,9459,87531,75111,38795,63087,77030,89928,25073,95244,67591,9430,7808,40843,96769,3838,18837,57382,41605,93243,48771,76549,40966,14909,71424,99409,76669,45288,44737,70738,97851,82119,44612,44070,97150,7430,33876,77967,43266,18146,94466,487,54633,49059,76370,86152],
     [35465, 87830],
     )
])
def test_candy_swap(A, B, expected):
    sol = Solution()
    assert sol.fairCandySwap3(A, B) == expected